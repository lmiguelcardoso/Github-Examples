name: Expression Functions Examples
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  expression-functions-demo:
    runs-on: ubuntu-latest
    steps:
      - name: Check if string contains substring
        if: ${{ contains('Expression Functions Examples', 'Functions') }}
        run: echo "The string contains the substring 'Functions'."
      
      - name: Check if string starts with
        if: ${{ startsWith('Expression Functions Examples', 'Expression') }}
        run: echo "The string starts with 'Expression'."
      
      - name: Check if string ends with
        if: ${{ endsWith('Expression Functions Examples', 'Examples') }}
        run: echo "The string ends with 'Examples'."
      
      - name: Format and echo string
        run: echo \${{ format('Hello {0} {1} {2}', 'John', 'Doe', 'Smith') }}
      
      - name: Join array elements
        run: |
          echo "Joined array: apple,banana,cherry"
      
      - name: Convert to JSON
        run: echo "${{ toJSON(github) }}"
      
      - name: Parse JSON string
        run: echo "\${{ fromJSON('{\"foo\":\"bar\"}').foo }}"
      
      - name: Hash files
        run: echo " \${{ hashFiles('**/package.json', '**/yarn.lock') }}"
      
      - name: Always run this step
        if: ${{ always() }}
        run: echo "This step always runs."
      
      - name: Check if job status is success
        if: ${{ success() }}
        run: echo "The job has succeeded."
      
      - name: Check if job status is failure
        if: ${{ failure() }}
        run: echo "The job has failed."
      
      - name: Check if expression is true
        if: ${{ true }}
        run: echo "This expression evaluates to true."
      
      - name: Check if expression is false
        if: ${{ false }}
        run: echo "This expression evaluates to false." # This step will not run
      
      - name: Calculate an expression
        run: |
          VALUE=$((5 + 10))
          echo "Calculated value: $VALUE"
      
      - name: Check environment variable
        env:
          MY_VAR: 'Hello'
        run: echo "\${{ env.MY_VAR }}"
      
      - name: Default to empty string if null
        run: echo "\${{ coalesce(null, '') }}"
      
      - name: Replace string
        run: echo \${{ replace('Hello world', 'world', 'GitHub') }}
